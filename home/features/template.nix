{ config, lib, pkgs, pkgs-unstable, ... }:

# How to configure a module
# See https://nixos-and-flakes.thiscute.world/other-usage-of-flakes/module-system

# How to configure options:
# See https://github.com/NixOS/nixpkgs/blob/nixos-25.05/nixos/doc/manual/development/option-declarations.section.md
# How to configure option types:
# See https://github.com/NixOS/nixpkgs/blob/nixos-25.05/nixos/doc/manual/development/option-types.section.md
# How to define options (via config ; mkIf ; mkDefault/mkOverride/mkForce ; mkOrder/mkBefore/mkAfter):
# See https://github.com/NixOS/nixpkgs/blob/nixos-25.05/nixos/doc/manual/development/option-def.section.md

let 
  cfg = config.foo.bar;
in {
  options.foo.bar = {
    enable = lib.mkEnableOption "The bar feature of foo";
    package = lib.mkOption {
      type = lib.types.package;
      default = pkgs.hello;
      defaultText = lib.literalExpression "pkgs.hello";
      description = "the bar feature package to use for foo";
    };
    extraConfig = lib.mkOption {
      default = "";
      example = ''
        foo bar
      '';
      type = lib.types.lines;
      description = ''
        Extra settings for the bar feature.
      '';
    };
  };

  config = lib.mkIf cfg.enable {
    home.packages = [cfg.package];
    xdg.configFile."foo/bar.config" = lib.mkIf (cfg.extraConfig != "") {
      text = ''
        # Generated by Home Manager

        ${cfg.extraConfig}
      '';
    };
  };
}