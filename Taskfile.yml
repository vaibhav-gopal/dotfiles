# https://taskfile.dev

version: '3'

vars:
  DIR: ~/dotfiles

# unfortunately must use absolute paths here (in only this root taskfile) for the global taskfile via `link` task to work
includes:
  templates:
    taskfile: ~/dotfiles/templates/Taskfile.yml
    dir: ~/dotfiles/templates
  nix-base:
    taskfile: ~/dotfiles/nix/nix-base/Taskfile.yml
    dir: ~/dotfiles/nix/nix-base
    optional: true
  nix-darwin:
    taskfile: ~/dotfiles/nix/nix-darwin/Taskfile.yml
    dir: ~dotfiles/nix/nix-darwin
    optional: true
    vars:
      NIXCONFIG: vgmacbook
      NIXPKGSVERSION: 25.05
  nixos:
    taskfile: ~/dotfiles/nix/nixos/Taskfile.yml
    dir: ~/dotifles/nix/nixos
    optional: true
    vars:
      NIXCONFIG: vgnixos
      NIXPKGSVERSION: 25.05
  nixos-wsl:
    taskfile: ~/dotfiles/nix/nixos-wsl/Taskfile.yml
    dir: ~/dotfiles/nix/nixos-wsl
    optional: true
    vars:
      NIXCONFIG: vgwsl2
      NIXPKGSVERSION: 25.05

tasks:
  default:
    desc: List all commands available in taskfile across all archetypes
    cmds:
      - echo -e "\033[1;34mListing all tasks for {{.DIR}}\033[0m"
      - task --list {{.DIR}}
    silent: true

  gc:
    aliases: [gcgen]
    desc: 'garbage collect old (7 days) nix store entries [gcgen: clean generations, --force (flag): not just old but all]'
    cmds:
      - sudo -H nix-collect-garbage {{if eq .ALIAS "gcgen"}}-d{{end}} {{if not .CLI_FORCE}}--delete-older-than 7d{{end}}

  list:
    desc: List all arcetypes currently available
    vars:
      ARCHETYPES:
        sh: "ls -d1 {{.DIR}}/nix/*/"
    cmds:
      - echo -e "\033[1;34mListing all nix archetypes at {{.DIR}}/nix \033[0m"
      - for: { var: ARCHETYPES, as: ITEM }
        cmd: basename {{.ITEM}}
    silent: true

  activate:*:
    desc: Activate a nix archetypes main flake and taskfile ; prevents accidental builds ; cleans task output
    vars:
      NIXCONFIG: '{{index .MATCH 0}}'
    preconditions:
      - sh: test -d {{.DIR}}/nix/{{.NIXCONFIG}}
        msg: 'Provide a valid nix archetype name. Provided: {{.NIXCONFIG}}'
      - sh: test -f {{.DIR}}/nix/{{.NIXCONFIG}}/flake.inactive.nix
        msg: 'The flake.nix at {{.NIXCONFIG}} is not inactive! (must be flake.inactive.nix)'
      - sh: test -f {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.inactive.yml
        msg: 'The Taskfile.yml at {{.NIXCONFIG}} is not inactive! (must be Taskfile.inactive.yml)'
    status:
      - test -f {{.DIR}}/nix/{{.NIXCONFIG}}/flake.nix
      - test -f {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.yml
    cmds:
      - mv {{.DIR}}/nix/{{.NIXCONFIG}}/flake.inactive.nix {{.DIR}}/nix/{{.NIXCONFIG}}/flake.nix
      - mv {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.inactive.yml {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.yml

  deactivate:*:
    desc: Deactivates a nix archetype main flake and taskfile
    vars:
      NIXCONFIG: '{{index .MATCH 0}}'
    preconditions:
      - sh: test -d {{.DIR}}/nix/{{.NIXCONFIG}}
        msg: 'Provide a valid nix archetype name. Provided: {{.NIXCONFIG}}'
      - sh: test -f {{.DIR}}/nix/{{.NIXCONFIG}}/flake.nix
        msg: 'The flake.nix at {{.NIXCONFIG}} is not active! (must be flake.nix not flake.inactive.nix)'
      - sh: test -f {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.yml
        msg: 'The Taskfile.yml at {{.NIXCONFIG}} is not active! (must be Taskfile.yml not Taskfile.inactive.yml)'
    status:
      - test -f {{.DIR}}/nix/{{.NIXCONFIG}}/flake.inactive.nix
      - test -f {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.inactive.yml
    cmds:
      - mv {{.DIR}}/nix/{{.NIXCONFIG}}/flake.nix {{.DIR}}/nix/{{.NIXCONFIG}}/flake.inactive.nix
      - mv {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.yml {{.DIR}}/nix/{{.NIXCONFIG}}/Taskfile.inactive.yml

  link:
    desc: Link this taskfile to the home directory (enables access via `task -g` or `task --global`)
    status:
      - test -L ~/Taskfile.yml
    cmds:
      - ln -s {{.TASKFILE}} ~/Taskfile.yml

  unlink:
    desc: Unlink this taskfile from home directory
    preconditions:
      - sh: test -L ~/Taskfile.yml
        msg: 'The ~/Taskfile.yml file must be a symlink in order to remove!'
    cmds:
      - rm ~/Taskfile.yml